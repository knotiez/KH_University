<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="studentMapper">

	<resultMap type="Student" id="studentResult">
		<result column="student_no" property="studentNo"/>
		<result column="student_id" property="studentId"/>
		<result column="student_pwd" property="studentPwd"/>
		<result column="student_name" property="studentName"/>
		<result column="student_ssn" property="studentSsn"/>
		<result column="s_phone" property="stPhone"/>
		<result column="s_email" property="stEmail"/>
		<result column="s_address" property="stAddress"/>
		<result column="s_status" property="stStatus"/>
		<result column="enroll_date" property="enrollDate"/>
		<result column="absence_date" property="absenceDate"/>
		<result column="grad_date" property="gradDate"/>
	</resultMap>
	
	
	<resultMap id="courseResult" type="Course">
		<result column="course_no" property="courseNo"/>
		<result column="class_num" property="classNum"/>
		<result column="student_id" property="studentId"/>
		<result column="course_year" property="courseYear"/>
		<result column="course_semester" property="courseSemester"/>
		<result column="class_grade" property="classGrade"/>
		<result column="class_room" property="classRoom"/>
		<result column="class_time" property="classTime"/>
		<result column="class_name" property="className"/>
		<result column="class_score" property="classScore"/>
		<result column="class_typename" property="classTypeName"/>
		<result column="class_people" property="classPeople"/>
	</resultMap>	
		
	<resultMap type="Absence" id="absenceResult">
		<result column="abs_no" property="absNo"/>
		<result column="abs_id" property="absId"/>
		<result column="abs_start" property="absStart"/>	
		<result column="abs_end" property="absEnd"/>	
		<result column="abs_semester" property="absSemester"/>	
		<result column="abs_sort" property="absSort"/>	
		<result column="abs_insert" property="absInsert"/>	
		<result column="abs_update" property="absUpdate"/>	
	</resultMap>
	
	<resultMap type="Presence" id="presenceResult">
		<result column="pre_no" property="preNo"/>
		<result column="pre_id" property="preId"/>
		<result column="pre_year" property="preYear"/>	
		<result column="pre_semester" property="preSemester"/>	
		<result column="tb_status" property="tbStatus"/>	
	</resultMap>

 	<resultMap type="AbsenceStudentResult" id="absenceStudentResult">
 		<result column="student_no" property="studentNo" /> 
		<result column="abs_no" property="absNo"/> 
		<result column="abs_id" property="absId"/> 
		<result column="abs_start" property="absStart"/> 
		<result column="abs_end" property="absEnd"/> 
		<result column="abs_semester" property="absSemester"/> 
		<result column="tb_status" property="tbStatus"/> 
		<result column="abs_sort" property="absSort"/> 
		<result column="abs_insert" property="absInsert"/> 
		<result column="abs_update" property="absUpdate"/>   
	</resultMap> 

<select id="loginStudent" resultMap="studentResult">
	select 
	       student_no
	     , student_id
	     , student_pwd
	     , student_name
	     , student_ssn
	     , s_phone
	     , s_email
	     , s_address
	     , enroll_date
	     , absence_date
	     , grad_date
	  from student
	 where student_id = #{studentId}
	   and s_status = 'Y'
</select>

<insert id="insertTakeOff">
	insert
	  into absence
	  (
	    abs_no
	  , abs_id
	  , abs_start
	  , abs_end
	  , abs_semester
	  , abs_sort
	  , abs_status
	  , abs_insert
	  , abs_update
	  )
	  values
	  (	
	  	#{absNo}
	  , #{absId}
	  , #{absStart}
	  , #{absEnd}
	  , #{absSemester}
	  , #{absSort}
	  , #{absStatus}
	  , sysdate
	  , sysdate
	  )
</insert>

<insert id="insertReturnSchool">
	insert
	  into presence
	  (
	  	pre_no
	  , pre_id
	  , pre_semester
	  , pre_grade

	  )
	  values
	  (
	  	#{preNo}
	  , #{preId}
	  , #{preSemester}
	  , #{preGrade}
	  )
</insert>

<select id="selectTakeOff" resultMap="absenceResult">
	select
	       student_no
	     , abs_semester
	     , abs_grade
	     , abs_sort
	  from absence
	  join student on (student_no = abs_no)
	 where s_status = 'Y'	  
</select>

<select id="selectTakeOffStudent" resultMap="absenceStudentResult">
	select
	       student_no
	     , abs_no
	     , abs_id
	     , abs_start
	     , abs_end
	     , abs_semester
	     , tb_status
	     , abs_sort
	     , abs_insert
	     , abs_update
	  from absence
	  join student on (student_no = abs_no)
	 where s_status = 'Y'	  
	 and abs_id = #{absId}
</select>

	<!-- 누구껀지확인부탁! 동석, 도현, 수지 아님 혹시 연뎡..? 하하
	<select id="selectChkStudent" resultMap="studentResult">
		select 
		       *
		  from student
		 where student_id = #{studentId}
		   and s_status = 'Y'
		</select>
	 -->
	 
	<select id="selectChkStudent" resultMap="studentResult">
		select 
		       *
		  from student
		 where s_email = #{email}
	</select>

	<update id="changePwd" parameterType="map">
	    update student
	    set student_pwd = #{userPwd}
	    where student_id = #{memberId}
	</update>

	<insert id="insertStudent">
		insert
		  into student
		     (
		       student_no
		     , student_id
		     , student_pwd
		     , student_name
		     , student_ssn
		     , s_phone
		     , s_email
		     , s_address
		     )
		values
		     (
		       seq_mno.nextval
		     , 'kh'||to_char(sysdate, 'yy')||to_char(seq_user_no.nextval, 'FM0000')
		     , #{studentPwd}
		     , #{studentName}
		     , #{studentSsn}
		     , #{stPhone}
		     , #{stEmail}
		     , #{stAddress}
		     )
	</insert>

	<select id="selectStudentId" resultType="String">
		select
		       student_id
		  from student
		 where s_email = #{stEmail}     
	</select>
	
		<select id="verifyEmail" resultType="_int">
		select
		       count(*)
		  from student
		 where s_email = #{email}      
	</select>


	<select id="selectCourseList" resultMap="courseResult">
			select
			       course_no
			     , class_num
			     , class_grade
			     , course_semester
			     , class_name
			     , class_room
			     , class_time
			     , class_score
		         , class_typename
		         , class_people
			  from course
			  join class using (class_num)
		      join class_type using (class_type)
			 where student_id = #{studentId}
			   and course_year = '2024'
	</select>
	
	<select id="searchCourse" resultMap="courseResult">
		select
		       course_no
		     , class_num
		     , class_grade
		     , course_semester
		     , class_name
		     , class_room
		     , class_time
		     , class_score
	         , class_typename
	         , class_people
		  from course
		  join class using (class_num)
		  join class_type using (class_type)
		 where course_year = 2024
	       and class_num = #{courseNum}
	</select>
	
	<select id="selectClassName" resultMap="courseResult">
		select 
		       class_name
		  from course
		  join class using (class_num)
		 where course_status = 'Y'
		   and class_num = #{classNum}
	</select>
	
	<update id="updateAddress">
		update student
		   set s_address = #{stAddress}
		 where student_id = #{studentId}
	</update>
	
	<update id="updatePhone">
		update student
		set s_phone = #{stPhone}
		where student_id = #{studentId}
	</update>
	
	<select id="selectAllStudent" resultMap="studentResult">
		select
			   student_no
			 , student_name
			 , student_id
			 , s_phone
			 , s_status  
		  from student
		 order
		    by student_no desc	   
	</select>
	
	<select id="selectNameSearchAllStudent" resultMap="studentResult">
		select
			   student_no
			 , student_name
			 , student_id
			 , s_phone
			 , s_status  
		  from student
		 where student_name like '%' || #{studentName} || '%'
		 order
		    by student_no desc	   
	</select>
		
	<select id="selectStatusStudent" resultMap="studentResult">
		select
			   student_no
			 , student_name
			 , student_id
			 , s_phone
			 , s_status  
		  from student
		 where s_status = #{stStatus}
		 order
		    by student_no desc	   
	</select>

	<select id="selectStatusNameSearchStudent" resultMap="studentResult">
		select
			   student_no
			 , student_name
			 , student_id
			 , s_phone
			 , s_status  
		  from student
		 where s_status = #{stStatus}
		   and student_name like '%' || #{studentName} || '%'
		 order
		    by student_no desc	   
	</select>

	<select id="selectStudentListCount" resultType="_int">
		select
			   count(*)
		  from student
	</select>

	<select id="selectStudentListCountType" resultType="_int">
		select
			   count(*)
		  from student
		 where s_status = #{stStatus}
	</select>

	<select id="selectNameSearchStudentListCount" resultType="_int">
		select
			   count(*)
		  from student
		 where student_name like '%' || #{studentName} || '%'
	</select>

	<select id="selectStatusNameSearchStudentListCount" resultType="_int">
		select
			   count(*)
		  from student
		 where student_name like '%' || #{studentName} || '%'
		   and s_status = #{stStatus}
	</select>

	<select id="selectNumberOfStudent" resultType="_int">
		select
		       count(*)
		  from student
		 where s_status = #{stStatus}
	</select>
	
</mapper>